#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

UPDATE_DB=false

success() {
    echo -e "$(tput setaf 2)$1$(tput sgr0)"
}

inform() {
    echo -e "$(tput setaf 6)$1$(tput sgr0)"
}

warning() {
    echo -e "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

progress() {
    count=0
    until [ $count -eq $1 ]; do
        echo -n "..." && sleep 1
        ((count++))
    done
    echo
}

sysupdate() {
    if ! $UPDATE_DB; then
        echo "Updating apt indexes..." && progress 3 &
        sudo apt-get update 1> /dev/null || { warning "Apt failed to update indexes!" && exit 1; }
        echo "Reading package lists..."
        progress 3 && UPDATE_DB=true
    fi
}

apt_pkg_req() {
    APT_CHK=$(dpkg-query -W -f='${Status}\n' "$1" 2> /dev/null | grep "install ok installed")

    if [ "" == "$APT_CHK" ]; then
        echo "$1 is required"
        true
    else
        echo "$1 is already installed"
        false
    fi
}

apt_pkg_install() {
    echo "Installing $1..."
    sudo apt-get --yes install "$1" 1> /dev/null || { echo -e "Apt failed to install $1!\nFalling back on pypi..." && return 1; }
    echo
}

inform "\nPicade Updater. Version 1.1\n"

FIRMWARE=${1:-picade.hex}

echo "Checking for required packages..."

if apt_pkg_req "avrdude"; then
    sysupdate && apt_pkg_install avrdude
fi

if apt_pkg_req "python-serial"; then
    sysupdate && apt_pkg_install python-serial
fi

inform "\nUpdating should continue automatically. \nIf not, press reset on your Picade.\n"

if [ -e /dev/ttyACM0 ]; then
#	stty -F /dev/ttyACM0 1200
	python -c "import serial;s=serial.Serial('/dev/ttyACM0',1200);s.setRTS(True);s.setDTR(False);s.close()"
	while [ -e /dev/ttyACM0 ];
	do
		sleep 0.01
	done
fi

while [ ! -e /dev/ttyACM0 ]; do
	sleep 0.01
done

sleep 0.5

avrdude -D -c avr109 -p m32u4 -P /dev/ttyACM0 -U flash:w:$FIRMWARE
